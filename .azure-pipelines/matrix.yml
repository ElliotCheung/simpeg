parameters:
  os : ['ubuntu-latest']
  py_vers: ['3.7']
  test: ['tests/em',
         'tests/base tests/flow tests/seis tests/utils',
         'tests/docs',
         'tests/examples/test_examples_1.py',
         'tests/examples/test_examples_2.py',
         'tests/examples/test_examples_3.py',
         'tests/examples/test_tutorials_1.py tests/examples/test_tutorials_2.py',
         'tests/examples/test_tutorials_3.py',
         'tests/pf',
         'tests/dask', # This must be ran on it's own to avoid modifying the code from any other tests.
         ]

jobs:
  - ${{ each os in parameters.os }}:
    - ${{ each py_vers in parameters.py_vers }}:
      - ${{ each test in parameters.test }}:
        - job:
          displayName: ${{ os }}_${{ py_vers }}_${{ test }}
          pool:
            vmImage: ${{ os }}
          steps:
          - bash: |
              curl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba
              export MAMBA_ROOT_PREFIX=~/micromamba
              eval "$(./bin/micromamba shell hook -s posix)"
              ./bin/micromamba shell init -s bash -p ~/micromamba
              mkdir -p ~/micromamba/pkgs/
            displayName: Install micromamba

          - bash: |
              export MAMBA_ROOT_PREFIX=~/micromamba
              export MAMBA_EXE=$(pwd)/micromamba
              . $MAMBA_ROOT_PREFIX/etc/profile.d/mamba.sh
              echo "  - python="${{ py_vers }} >> environment_test.yml
              ./bin/micromamba create -y -f environment_test.yml
              ./bin/micromamba activate simpeg-test
              pip install pytest-azurepipelines
            displayName: Create Anaconda testing environment

          - bash: |
              eval "$(./bin/micromamba shell hook --shell=bash)"
              ./bin/micromamba activate simpeg-test
              pip install -e .
            displayName: Build package

          - bash: |
              eval "$(./bin/micromamba shell hook --shell=bash)"
              ./bin/micromamba activate simpeg-test
              export KMP_WARNINGS=0
              pytest ${{ test }} -v -s --cov-config=.coveragerc --cov=SimPEG --cov-report=xml --cov-report=html -W ignore::DeprecationWarning
            displayName: 'Testing ${{ test }}'

          - bash: |
              bash <(curl -s https://codecov.io/bash)
            displayName: 'Upload coverage to codecov.io'
            condition: eq(${{ py_vers }}, '3.7')
